// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clipboard.proto

package clipboardsync

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Clipboard struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Clipboard) Reset()         { *m = Clipboard{} }
func (m *Clipboard) String() string { return proto.CompactTextString(m) }
func (*Clipboard) ProtoMessage()    {}
func (*Clipboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_72275e738ef73aac, []int{0}
}

func (m *Clipboard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Clipboard.Unmarshal(m, b)
}
func (m *Clipboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Clipboard.Marshal(b, m, deterministic)
}
func (m *Clipboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clipboard.Merge(m, src)
}
func (m *Clipboard) XXX_Size() int {
	return xxx_messageInfo_Clipboard.Size(m)
}
func (m *Clipboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Clipboard.DiscardUnknown(m)
}

var xxx_messageInfo_Clipboard proto.InternalMessageInfo

func (m *Clipboard) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Copied struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Copied) Reset()         { *m = Copied{} }
func (m *Copied) String() string { return proto.CompactTextString(m) }
func (*Copied) ProtoMessage()    {}
func (*Copied) Descriptor() ([]byte, []int) {
	return fileDescriptor_72275e738ef73aac, []int{1}
}

func (m *Copied) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Copied.Unmarshal(m, b)
}
func (m *Copied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Copied.Marshal(b, m, deterministic)
}
func (m *Copied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Copied.Merge(m, src)
}
func (m *Copied) XXX_Size() int {
	return xxx_messageInfo_Copied.Size(m)
}
func (m *Copied) XXX_DiscardUnknown() {
	xxx_messageInfo_Copied.DiscardUnknown(m)
}

var xxx_messageInfo_Copied proto.InternalMessageInfo

func (m *Copied) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Clipboard)(nil), "clipboardsync.Clipboard")
	proto.RegisterType((*Copied)(nil), "clipboardsync.Copied")
}

func init() { proto.RegisterFile("clipboard.proto", fileDescriptor_72275e738ef73aac) }

var fileDescriptor_72275e738ef73aac = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0xc9, 0x2c,
	0x48, 0xca, 0x4f, 0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0x0b, 0x14,
	0x57, 0xe6, 0x25, 0x2b, 0xc9, 0x73, 0x71, 0x3a, 0xc3, 0x04, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12,
	0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x25, 0x2e, 0x36, 0xe7,
	0xfc, 0x82, 0xcc, 0xd4, 0x14, 0x21, 0x09, 0x2e, 0xf6, 0xe2, 0xd2, 0xe4, 0xe4, 0xd4, 0xe2, 0x62,
	0xb0, 0x02, 0x8e, 0x20, 0x18, 0xd7, 0x28, 0x98, 0x8b, 0x17, 0x6e, 0x48, 0x70, 0x65, 0x5e, 0xb2,
	0x90, 0x13, 0x17, 0x6f, 0x70, 0x6a, 0x5e, 0x0a, 0xc2, 0x64, 0x09, 0x3d, 0x14, 0x6b, 0xf5, 0xe0,
	0x32, 0x52, 0xa2, 0xe8, 0x32, 0x60, 0xcb, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xee, 0x35, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x9e, 0x7a, 0x02, 0xd7, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClipboardSyncClient is the client API for ClipboardSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClipboardSyncClient interface {
	SendClipboard(ctx context.Context, in *Clipboard, opts ...grpc.CallOption) (*Copied, error)
}

type clipboardSyncClient struct {
	cc *grpc.ClientConn
}

func NewClipboardSyncClient(cc *grpc.ClientConn) ClipboardSyncClient {
	return &clipboardSyncClient{cc}
}

func (c *clipboardSyncClient) SendClipboard(ctx context.Context, in *Clipboard, opts ...grpc.CallOption) (*Copied, error) {
	out := new(Copied)
	err := c.cc.Invoke(ctx, "/clipboardsync.ClipboardSync/SendClipboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipboardSyncServer is the server API for ClipboardSync service.
type ClipboardSyncServer interface {
	SendClipboard(context.Context, *Clipboard) (*Copied, error)
}

func RegisterClipboardSyncServer(s *grpc.Server, srv ClipboardSyncServer) {
	s.RegisterService(&_ClipboardSync_serviceDesc, srv)
}

func _ClipboardSync_SendClipboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Clipboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipboardSyncServer).SendClipboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clipboardsync.ClipboardSync/SendClipboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipboardSyncServer).SendClipboard(ctx, req.(*Clipboard))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClipboardSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clipboardsync.ClipboardSync",
	HandlerType: (*ClipboardSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClipboard",
			Handler:    _ClipboardSync_SendClipboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clipboard.proto",
}
